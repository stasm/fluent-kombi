
/* An FTL file defines a Resource. */
Resource                   ::= (blank_line | Entry)*
Entry                      ::= Message
                             | Term
                             | (ResourceComment | GroupComment | Comment)
                             | Junk
Message                    ::= Comment? Identifier (inline_space? "=" inline_space?) ((Pattern Attribute*) | (Attribute+)) line_end
Term                       ::= Comment? TermIdentifier (inline_space? "=" inline_space?) Pattern Attribute* line_end
Attribute                  ::= break_indent "." Identifier (inline_space? "=" inline_space?) Pattern
Comment                    ::= ("#" comment_line)+
GroupComment               ::= ("##" comment_line)+
ResourceComment            ::= ("###" comment_line)+
Junk                       ::= ((/.*/ line_end) - Comment - GroupComment - ResourceComment - Term - Message)+

/* Patterns consist of TextElements or Placeables. */
Pattern                    ::= PatternElement+
PatternElement             ::= TextElement
                             | Placeable
                             | (break_indent Placeable)
TextElement                ::= (text_char | text_cont)+
Placeable                  ::= "{" (inline_space? (BlockExpression | InlineExpression) inline_space?) "}"
BlockExpression            ::= SelectExpression
                             | VariantList
InlineExpression           ::= StringExpression
                             | NumberExpression
                             | CallExpression
                             | MessageAttributeExpression
                             | TermVariantExpression
                             | Identifier
                             | TermIdentifier
                             | ExternalArgument
                             | Placeable

/* Inline Expressions */
StringExpression           ::= quoted_text
NumberExpression           ::= number
ExternalArgument           ::= ExternalIdentifier
CallExpression             ::= Function "(" (inline_space? argument_list? inline_space?) ")"
argument_list              ::= Argument ("," Argument)* ","?
Argument                   ::= inline_space? (NamedArgument | InlineExpression) inline_space?
NamedArgument              ::= Identifier (inline_space? ":" inline_space?) (StringExpression | NumberExpression)
MessageAttributeExpression ::= Identifier "." Identifier
TermAttributeExpression    ::= TermIdentifier "." Identifier
TermVariantExpression      ::= TermIdentifier "[" (inline_space? VariantKey inline_space?) "]"

/* Block Expressions */
SelectExpression           ::= SelectorExpression (inline_space? "->" inline_space?) variant_list break_indent
VariantList                ::= variant_list break_indent
variant_list               ::= Variant* DefaultVariant Variant*
VariantName                ::= word (inline_space word)*
VariantKey                 ::= NumberExpression
                             | VariantName
Variant                    ::= break_indent "[" (inline_space? VariantKey inline_space?) "]" inline_space? Pattern
DefaultVariant             ::= break_indent "*" "[" (inline_space? VariantKey inline_space?) "]" inline_space? Pattern
SelectorExpression         ::= StringExpression
                             | NumberExpression
                             | CallExpression
                             | TermAttributeExpression
                             | ExternalArgument

/* Identifiers */
Identifier                 ::= identifier
TermIdentifier             ::= "-" identifier
ExternalIdentifier         ::= "$" identifier
Function                   ::= [A-Z] [A-Z_?-]*

/* Tokens */
identifier                 ::= [a-zA-Z] [a-zA-Z0-9_-]*
comment_line               ::= (line_end)
                             | ("\u0020" /.*/ line_end)
word                       ::= (regular_char - backslash - "}" - "{" - "]" - "[")+

/* Characters */
backslash                  ::= "\\"
quote                      ::= "\""
/* Any Unicode character from BMP excluding C0 control characters, space,
 * surrogate blocks and non-characters (U+FFFE, U+FFFF).
 * Cf. https://www.w3.org/TR/REC-xml/#NT-Char
 * TODO Add characters from other planes: U+10000 to U+10FFFF.
 */
regular_char               ::= [!-\uD7FF\uE000-\uFFFD]
text_char                  ::= inline_space
                             | /\\u[0-9a-fA-F]{4}/
                             | (backslash backslash)
                             | (backslash "{")
                             | (regular_char - "{" - backslash)
text_cont                  ::= break_indent (text_char - "}" - "[" - "*" - ".")
quoted_text_char           ::= (text_char - quote)
                             | (backslash quote)
quoted_text                ::= quote quoted_text_char* quote
digit                      ::= [0-9]
number                     ::= "-"? digit+ ("." digit+)?

/* Whitespace */
inline_space               ::= ("\u0020" | "\u0009")+
line_end                   ::= "\u000D\u000A"
                             | "\u000A"
                             | "\u000D"
                             | EOF
blank_line                 ::= inline_space? line_end
break_indent               ::= line_end blank_line* inline_space
